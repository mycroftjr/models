{
  "$schema": "https://raw.githubusercontent.com/sims4toolkit/misc/main/json-schemas/docs-item-schema.json",
  "imports": [
    "import { StringTableResource } from \"@s4tk/models\"; // ESM",
    "const { StringTableResource } = require(\"@s4tk/models\"); // CJS"
  ],
  "header": {
    "title": {
      "prefix": "class",
      "name": "StringTableResource",
      "extends": [
        {
          "name": "MappedModel<number, string, StringEntry>",
          "path": {
            "pkg": "models",
            "group": "abstracts",
            "item": "MappedModel"
          }
        }
      ],
      "implements": [
        {
          "name": "Resource",
          "path": {
            "pkg": "models",
            "group": "types",
            "item": "Resource"
          }
        }
      ]
    },
    "description": "Model for string table (STBL) resources.",
    "sourceCode": "src/lib/resources/stbl/stbl-resource.ts"
  },
  "sections": [
    {
      "title": "Properties",
      "content": [
        {
          "displayType": "property",
          "prefix": "readonly",
          "name": "encodingType",
          "description": "Always 'EncodingType.STBL'.",
          "type": {
            "name": "EncodingType",
            "path": {
              "pkg": "models",
              "group": "enums",
              "item": "EncodingType"
            }
          },
          "overrides": {
            "name": "Resource",
            "path": {
              "pkg": "models",
              "group": "types",
              "item": "Resource"
            }
          }
        }
      ]
    },
    {
      "title": "Initialization",
      "content": [
        {
          "displayType": "function",
          "name": "constructor",
          "returnType": {
            "name": "StringTableResource"
          },
          "description": "Creates a new StringTableResource instance with the given entries, if any. If no entries are provided, an empty STBL is created.",
          "arguments": [
            {
              "description": "Entries to initialize the STBL model with",
              "optional": true,
              "name": "entries",
              "type": {
                "name": "KeyStringPair[]",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "KeyStringPair"
                }
              }
            },
            {
              "description": "Object of options.",
              "optional": true,
              "name": "options",
              "type": {
                "name": "WritableModelCreationOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "WritableModelCreationOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "const emptyStbl = new StringTableResource();"
            },
            {
              "code": "const stbl = StringTableResource.create([\n  {\n    key: 0x12345678,\n    value: \"hi\"\n  },\n  {\n    key: 0x87654321,\n    value: \"bye\"\n  }\n]);"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static",
          "name": "from",
          "returnType": {
            "name": "StringTableResource"
          },
          "description": "Creates a STBL resource from a buffer containing binary data. This buffer is assumed to be uncompressed; providing a compressed buffer will lead to unexpected behavior.",
          "arguments": [
            {
              "name": "buffer",
              "description": "Uncompressed buffer to read as a string table",
              "type": {
                "name": "Buffer"
              }
            },
            {
              "name": "options",
              "optional": true,
              "description": "Object of options",
              "type": {
                "name": "WritableModelFromOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "WritableModelFromOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "const stbl = StringTableResource.from(buffer);"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static async",
          "name": "fromAsync",
          "returnType": {
            "name": "StringTableResource"
          },
          "description": "Asynchronously creates a STBL resource from a buffer containing binary data. This buffer is assumed to be uncompressed; providing a compressed buffer will lead to unexpected behavior.",
          "arguments": [
            {
              "name": "buffer",
              "description": "Uncompressed buffer to read as a string table",
              "type": {
                "name": "Buffer"
              }
            },
            {
              "name": "options",
              "optional": true,
              "description": "Object of options",
              "type": {
                "name": "WritableModelFromOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "WritableModelFromOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "StringTableResource.fromAsync(buffer).then(stbl => {\n  // do stuff\n});"
            }
          ]
        },
        {
          "displayType": "function",
          "description": "Returns a new StringTableResource that contains the entries of the given StringTableResources.",
          "prefix": "static",
          "name": "merge",
          "arguments": [
            {
              "name": "stbls",
              "description": "StringTableResources to merge into a new stbl",
              "type": {
                "name": "StringTableResource[]"
              }
            }
          ],
          "returnType": {
            "name": "StringTableResource"
          }
        },
        {
          "displayType": "function",
          "description": "Returns a new StringTableResource that contains the entries of the given StringTableResources.",
          "prefix": "static async",
          "name": "mergeAsync",
          "arguments": [
            {
              "name": "stbls",
              "description": "StringTableResources to merge into a new stbl",
              "type": {
                "name": "StringTableResource[]"
              }
            }
          ],
          "returnType": {
            "name": "Promise<StringTableResource>"
          }
        }
      ]
    },
    {
      "title": "Methods",
      "content": [
        {
          "displayType": "function",
          "name": "addAndHash",
          "returnType": {
            "name": "StringEntry",
            "path": {
              "pkg": "models",
              "group": "types",
              "item": "StringEntry"
            }
          },
          "description": "Creates a new entry from the given string, adds it to the string table, and returns it. If 'toHash' is supplied, it will be hashed for the key. If not, then the string itself will be hashed.",
          "arguments": [
            {
              "name": "value",
              "type": {
                "name": "string"
              },
              "description": "String value to add to STBL."
            },
            {
              "name": "toHash",
              "optional": true,
              "description": "Optional string to hash for the key.",
              "type": {
                "name": "string"
              }
            }
          ],
          "examples": [
            {
              "code": "// adds an entry with key fnv32(\"something\")\nstbl.addAndHash(\"something\");\n\n// adds an entry with key fnv32(\"my_name:some_string\")\nstbl.addAndHash(\"something\", \"my_name:some_string\");"
            },
            {
              "code": "// To ensure that strings are not duplicated, consider using the following:\nstbl.getByValue(stringToAdd) ?? stbl.addAndHash(stringToAdd);"
            }
          ]
        },
        {
          "displayType": "function",
          "name": "isXml",
          "returnType": {
            "name": "boolean"
          },
          "description": "Always returns false.",
          "overrides": {
            "name": "Resource",
            "path": {
              "pkg": "models",
              "group": "types",
              "item": "Resource"
            }
          }
        },
        {
          "displayType": "function",
          "name": "toJsonObject",
          "returnType": {
            "name": "object[]"
          },
          "description": "Returns a list of entry objects. Each object has a key and a value, the key is either a string or number depending on the first argument. Each object may also have a numerical id, depending on the second argument.",
          "arguments": [
            {
              "name": "useHexKey",
              "type": {
                "name": "boolean"
              },
              "optional": true,
              "description": "Whether or not the key should be written as a hex string. True by default."
            },
            {
              "name": "useId",
              "type": {
                "name": "boolean"
              },
              "optional": true,
              "description": "Whether or not this entry's unique ID should be added to each object. False by default."
            }
          ]
        }
      ]
    }
  ],
  "footer": {
    "seeAlso": [
      {
        "name": "StringEntry",
        "path": {
          "pkg": "models",
          "group": "types",
          "item": "StringEntry"
        }
      },
      {
        "name": "MappedModel",
        "path": {
          "pkg": "models",
          "group": "abstracts",
          "item": "MappedModel"
        }
      }
    ]
  }
}