{
  "$schema": "https://raw.githubusercontent.com/sims4toolkit/misc/main/json-schemas/docs-item-schema.json",
  "imports": [
    "import { Package } from \"@s4tk/models\"; // ESM",
    "const { Package } = require(\"@s4tk/models\"); // CJS"
  ],
  "header": {
    "title": {
      "prefix": "class",
      "name": "Package",
      "extends": [
        {
          "name": "MappedModel<ResourceKey, Resource, ResourceEntry>",
          "path": {
            "pkg": "models",
            "group": "abstracts",
            "item": "MappedModel"
          }
        }
      ]
    },
    "description": "Model for Sims 4 package files (also called \"Database Packed Files\", or DBPF for short).",
    "sourceCode": "src/lib/packages/package.ts"
  },
  "sections": [
    {
      "title": "Initialization",
      "content": [
        {
          "displayType": "function",
          "name": "constructor",
          "description": "Creates a new Package.",
          "returnType": {
            "name": "Package"
          },
          "arguments": [
            {
              "name": "entries",
              "optional": true,
              "description": "Entries to initialize the package with.",
              "type": {
                "name": "ResourceKeyPair[]",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "ResourceKeyPair"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "const pkg = new Package([\n  { key, value }\n]);"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static",
          "name": "from",
          "returnType": {
            "name": "Package"
          },
          "description": "Reads the given buffer as a Package.",
          "arguments": [
            {
              "name": "buffer",
              "type": {
                "name": "Buffer"
              },
              "description": "Buffer to read as a Package."
            },
            {
              "name": "options",
              "optional": true,
              "description": "Optional arguments for reading the buffer.",
              "type": {
                "name": "PackageFileReadingOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "PackageFileReadingOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "const pkg = Package.from(buffer, {\n  saveBuffer: true\n});"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static async",
          "name": "fromAsync",
          "returnType": {
            "name": "Promise<Package>"
          },
          "description": "Asynchronously reads the given buffer as a Package.",
          "arguments": [
            {
              "name": "buffer",
              "type": {
                "name": "Buffer"
              },
              "description": "Buffer to read as a Package."
            },
            {
              "name": "options",
              "optional": true,
              "description": "Optional arguments for reading the buffer.",
              "type": {
                "name": "PackageFileReadingOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "PackageFileReadingOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "Package.fromAsync(buffer, {\n  saveBuffer: true\n}).then(pkg => {\n  // do stuff\n});"
            }
          ]
        }
      ]
    },
    {
      "title": "Other Static Methods",
      "content": [
        {
          "displayType": "function",
          "prefix": "static",
          "name": "extractResources",
          "returnType": {
            "name": "ResourceKeyPair[]"
          },
          "description": "Reads the given buffer as a Package, but just returns its entries rather than a full Package object.",
          "arguments": [
            {
              "name": "buffer",
              "type": {
                "name": "Buffer"
              },
              "description": "Buffer to read as a Package."
            },
            {
              "name": "options",
              "optional": true,
              "description": "Optional arguments for reading the buffer.",
              "type": {
                "name": "PackageFileReadingOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "PackageFileReadingOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "const stringTables = Package.extractResources(buffer, {\n  resourceFilter(type, group, inst) {\n    return type === BinaryResourceType.StringTable;\n  }\n});"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static async",
          "name": "extractResourcesAsync",
          "returnType": {
            "name": "Promise<ResourceKeyPair[]>"
          },
          "description": "Asynchronously reads the given buffer as a Package, but just returns its entries rather than a full Package object.",
          "arguments": [
            {
              "name": "buffer",
              "type": {
                "name": "Buffer"
              },
              "description": "Buffer to read as a Package."
            },
            {
              "name": "options",
              "optional": true,
              "description": "Optional arguments for reading the buffer.",
              "type": {
                "name": "PackageFileReadingOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "PackageFileReadingOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "Package.extractResourcesAsync(buffer, {\n  resourceFilter(type, group, inst) {\n    return type === BinaryResourceType.StringTable;\n  }\n}).then(stringTables => {\n  // do stuff\n});"
            }
          ]
        }
      ]
    }
  ],
  "footer": {
    "seeAlso": [
      {
        "name": "Resource",
        "path": {
          "pkg": "models",
          "group": "types",
          "item": "Resource"
        }
      },
      {
        "name": "ResourceEntry",
        "path": {
          "pkg": "models",
          "group": "types",
          "item": "ResourceEntry"
        }
      },
      {
        "name": "ResourceKey",
        "path": {
          "pkg": "models",
          "group": "types",
          "item": "ResourceKey"
        }
      },
      {
        "name": "ResourceKeyPair",
        "path": {
          "pkg": "models",
          "group": "types",
          "item": "ResourceKeyPair"
        }
      }
    ]
  }
}