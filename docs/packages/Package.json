{
  "$schema": "https://raw.githubusercontent.com/sims4toolkit/misc/main/json-schemas/docs-item-schema.json",
  "imports": [
    "import { Package } from \"@s4tk/models\"; // ESM",
    "const { Package } = require(\"@s4tk/models\"); // CJS"
  ],
  "header": {
    "title": {
      "prefix": "class",
      "name": "Package",
      "generics": [
        {
          "name": "ResourceType",
          "extends": [
            {
              "name": "Resource",
              "path": {
                "pkg": "models",
                "group": "types",
                "item": "Resource"
              }
            }
          ]
        }
      ],
      "extends": [
        {
          "name": "MappedModel<ResourceKey, Resource, ResourceEntry<ResourceType>>",
          "path": {
            "pkg": "models",
            "group": "abstracts",
            "item": "MappedModel"
          }
        }
      ]
    },
    "description": "Model for Sims 4 package files (also called \"Database Packed Files\", or DBPF for short).",
    "sourceCode": "src/lib/packages/package.ts"
  },
  "sections": [
    {
      "title": "Initialization",
      "content": [
        {
          "displayType": "function",
          "name": "constructor",
          "description": "Creates a new Package.",
          "returnType": {
            "name": "Package"
          },
          "arguments": [
            {
              "name": "entries",
              "optional": true,
              "description": "Entries to initialize the package with.",
              "type": {
                "name": "ResourceKeyPair<ResourceType>[]",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "ResourceKeyPair"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "const pkg = new Package([\n  { key, value }\n]);"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static",
          "name": "from",
          "generics": [
            {
              "name": "T",
              "extends": [
                {
                  "name": "Resource",
                  "path": {
                    "pkg": "models",
                    "group": "types",
                    "item": "Resource"
                  }
                }
              ]
            }
          ],
          "returnType": {
            "name": "Package<T>"
          },
          "description": "Reads the given buffer as a Package.",
          "arguments": [
            {
              "name": "buffer",
              "type": {
                "name": "Buffer"
              },
              "description": "Buffer to read as a Package."
            },
            {
              "name": "options",
              "optional": true,
              "description": "Optional arguments for reading the buffer.",
              "type": {
                "name": "PackageFileReadingOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "PackageFileReadingOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "const pkg = Package.from(buffer, {\n  saveBuffer: true\n});"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static async",
          "name": "fromAsync",
          "generics": [
            {
              "name": "T",
              "extends": [
                {
                  "name": "Resource",
                  "path": {
                    "pkg": "models",
                    "group": "types",
                    "item": "Resource"
                  }
                }
              ]
            }
          ],
          "returnType": {
            "name": "Promise<Package<T>>"
          },
          "description": "Asynchronously reads the given buffer as a Package.",
          "arguments": [
            {
              "name": "buffer",
              "type": {
                "name": "Buffer"
              },
              "description": "Buffer to read as a Package."
            },
            {
              "name": "options",
              "optional": true,
              "description": "Optional arguments for reading the buffer.",
              "type": {
                "name": "PackageFileReadingOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "PackageFileReadingOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "Package.fromAsync(buffer, {\n  saveBuffer: true\n}).then(pkg => {\n  // do stuff\n});"
            }
          ]
        },
        {
          "displayType": "function",
          "description": "Returns a new Package that contains the entries of the given Packages.",
          "prefix": "static",
          "name": "merge",
          "generics": [
            {
              "name": "T",
              "extends": [
                {
                  "name": "Resource",
                  "path": {
                    "pkg": "models",
                    "group": "types",
                    "item": "Resource"
                  }
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "packages",
              "description": "Packages to merge into a new package",
              "type": {
                "name": "Package<T>[]"
              }
            }
          ],
          "returnType": {
            "name": "Package"
          }
        },
        {
          "displayType": "function",
          "description": "Returns a new Package that contains the entries of the given Packages.",
          "prefix": "static async",
          "name": "mergeAsync",
          "generics": [
            {
              "name": "T",
              "extends": [
                {
                  "name": "Resource",
                  "path": {
                    "pkg": "models",
                    "group": "types",
                    "item": "Resource"
                  }
                }
              ]
            }
          ],
          "arguments": [
            {
              "name": "packages",
              "description": "Packages to merge into a new package",
              "type": {
                "name": "Package<T>[]"
              }
            }
          ],
          "returnType": {
            "name": "Promise<Package>"
          }
        }
      ]
    },
    {
      "title": "Other Static Methods",
      "content": [
        {
          "displayType": "function",
          "prefix": "static",
          "name": "extractResources",
          "generics": [
            {
              "name": "T",
              "extends": [
                {
                  "name": "Resource",
                  "path": {
                    "pkg": "models",
                    "group": "types",
                    "item": "Resource"
                  }
                }
              ]
            }
          ],
          "returnType": {
            "name": "ResourceKeyPair<T>[]",
            "path": {
              "pkg": "models",
              "group": "types",
              "item": "ResourceKeyPair"
            }
          },
          "description": "Reads the given buffer as a Package, but just returns its entries rather than a full Package object.",
          "arguments": [
            {
              "name": "buffer",
              "type": {
                "name": "Buffer"
              },
              "description": "Buffer to read as a Package."
            },
            {
              "name": "options",
              "optional": true,
              "description": "Optional arguments for reading the buffer.",
              "type": {
                "name": "PackageFileReadingOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "PackageFileReadingOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "const stringTables = Package.extractResources(buffer, {\n  resourceFilter(type, group, inst) {\n    return type === BinaryResourceType.StringTable;\n  }\n});"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static async",
          "name": "extractResourcesAsync",
          "generics": [
            {
              "name": "T",
              "extends": [
                {
                  "name": "Resource",
                  "path": {
                    "pkg": "models",
                    "group": "types",
                    "item": "Resource"
                  }
                }
              ]
            }
          ],
          "returnType": {
            "name": "Promise<ResourceKeyPair<T>[]>",
            "path": {
              "pkg": "models",
              "group": "types",
              "item": "ResourceKeyPair"
            }
          },
          "description": "Asynchronously reads the given buffer as a Package, but just returns its entries rather than a full Package object.",
          "arguments": [
            {
              "name": "buffer",
              "type": {
                "name": "Buffer"
              },
              "description": "Buffer to read as a Package."
            },
            {
              "name": "options",
              "optional": true,
              "description": "Optional arguments for reading the buffer.",
              "type": {
                "name": "PackageFileReadingOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "PackageFileReadingOptions"
                }
              }
            }
          ],
          "examples": [
            {
              "code": "Package.extractResourcesAsync(buffer, {\n  resourceFilter(type, group, inst) {\n    return type === BinaryResourceType.StringTable;\n  }\n}).then(stringTables => {\n  // do stuff\n});"
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static",
          "name": "streamResources",
          "generics": [
            {
              "name": "T",
              "extends": [
                {
                  "name": "Resource",
                  "path": {
                    "pkg": "models",
                    "group": "types",
                    "item": "Resource"
                  }
                }
              ]
            }
          ],
          "returnType": {
            "name": "ResourceKeyPair<T>[]",
            "path": {
              "pkg": "models",
              "group": "types",
              "item": "ResourceKeyPair"
            }
          },
          "description": "Streams resources from the file at the given location. This method is much, much more space and time efficient than extractResources() when using a resource filter and/or a limit. But, if reading an entire package, it will likely perform the same or even slower.\n\nNOTE: This function requires @s4tk/plugin-bufferfromfile, and will throw if you do not have it installed.",
          "arguments": [
            {
              "name": "filepath",
              "type": {
                "name": "string"
              },
              "description": "Absolute path to file to read as a Package."
            },
            {
              "name": "options",
              "optional": true,
              "description": "Options for reading the resources.",
              "type": {
                "name": "PackageFileReadingOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "PackageFileReadingOptions"
                }
              }
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static async",
          "name": "streamResourcesAsync",
          "generics": [
            {
              "name": "T",
              "extends": [
                {
                  "name": "Resource",
                  "path": {
                    "pkg": "models",
                    "group": "types",
                    "item": "Resource"
                  }
                }
              ]
            }
          ],
          "returnType": {
            "name": "Promise<ResourceKeyPair<T>[]>",
            "path": {
              "pkg": "models",
              "group": "types",
              "item": "ResourceKeyPair"
            }
          },
          "description": "Asynchronously streams resources from the file at the given location. This method is much, much more space and time efficient than extractResources() when using a resource filter and/or a limit. But, if reading an entire package, it will likely perform the same or even slower.\n\nNOTE: This function requires @s4tk/plugin-bufferfromfile, and will throw if you do not have it installed.",
          "arguments": [
            {
              "name": "filepath",
              "type": {
                "name": "string"
              },
              "description": "Absolute path to file to read as a Package."
            },
            {
              "name": "options",
              "optional": true,
              "description": "Options for reading the resources.",
              "type": {
                "name": "PackageFileReadingOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "PackageFileReadingOptions"
                }
              }
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static",
          "name": "fetchResources",
          "generics": [
            {
              "name": "T",
              "extends": [
                {
                  "name": "Resource",
                  "path": {
                    "pkg": "models",
                    "group": "types",
                    "item": "Resource"
                  }
                }
              ]
            }
          ],
          "returnType": {
            "name": "ResourceKeyPair<T>[]",
            "path": {
              "pkg": "models",
              "group": "types",
              "item": "ResourceKeyPair"
            }
          },
          "description": "Fetches specific resources from the file at the given location. This method is incredibly fast, but requires an index to be used, which takes time to build up. Note that the filter and limit options will be ignored.\n\nNOTE: This function requires @s4tk/plugin-bufferfromfile, and will throw if you do not have it installed.",
          "arguments": [
            {
              "name": "filepath",
              "type": {
                "name": "string"
              },
              "description": "Absolute path to file to read as a Package."
            },
            {
              "name": "positions",
              "description": "Array containing objects that contain exact byte locations of the resources to fetch",
              "type": {
                "name": "ResourcePosition[]",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "ResourcePosition"
                }
              }
            },
            {
              "name": "options",
              "optional": true,
              "description": "Options for reading the resources.",
              "type": {
                "name": "PackageFileReadingOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "PackageFileReadingOptions"
                }
              }
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static async",
          "name": "fetchResourcesAsync",
          "generics": [
            {
              "name": "T",
              "extends": [
                {
                  "name": "Resource",
                  "path": {
                    "pkg": "models",
                    "group": "types",
                    "item": "Resource"
                  }
                }
              ]
            }
          ],
          "returnType": {
            "name": "Promise<ResourceKeyPair<T>[]>",
            "path": {
              "pkg": "models",
              "group": "types",
              "item": "ResourceKeyPair"
            }
          },
          "description": "Asynchronously fetches specific resources from the file at the given location. This method is incredibly fast, but requires an index to be used, which takes time to build up. Note that the filter and limit options will be ignored.\n\nNOTE: This function requires @s4tk/plugin-bufferfromfile, and will throw if you do not have it installed.",
          "arguments": [
            {
              "name": "filepath",
              "type": {
                "name": "string"
              },
              "description": "Absolute path to file to read as a Package."
            },
            {
              "name": "positions",
              "description": "Array containing objects that contain exact byte locations of the resources to fetch",
              "type": {
                "name": "ResourcePosition[]",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "ResourcePosition"
                }
              }
            },
            {
              "name": "options",
              "optional": true,
              "description": "Options for reading the resources.",
              "type": {
                "name": "PackageFileReadingOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "PackageFileReadingOptions"
                }
              }
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static",
          "name": "indexResources",
          "returnType": {
            "name": "ResourcePosition[]",
            "path": {
              "pkg": "models",
              "group": "types",
              "item": "ResourcePosition"
            }
          },
          "description": "Returns an array of objects that can be used to quickly fetch specific resources with fetchResources().\n\nNOTE: This function requires @s4tk/plugin-bufferfromfile, and will throw if you do not have it installed.",
          "arguments": [
            {
              "name": "filepath",
              "type": {
                "name": "string"
              },
              "description": "Absolute path to file to read as a Package."
            },
            {
              "name": "options",
              "optional": true,
              "description": "Options for reading the resources.",
              "type": {
                "name": "PackageFileReadingOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "PackageFileReadingOptions"
                }
              }
            }
          ]
        },
        {
          "displayType": "function",
          "prefix": "static async",
          "name": "indexResourcesAsync",
          "returnType": {
            "name": "Promise<ResourcePosition[]>",
            "path": {
              "pkg": "models",
              "group": "types",
              "item": "ResourcePosition"
            }
          },
          "description": "Asynchronously returns an array of objects that can be used to quickly fetch specific resources with fetchResources().\n\nNOTE: This function requires @s4tk/plugin-bufferfromfile, and will throw if you do not have it installed.",
          "arguments": [
            {
              "name": "filepath",
              "type": {
                "name": "string"
              },
              "description": "Absolute path to file to read as a Package."
            },
            {
              "name": "options",
              "optional": true,
              "description": "Options for reading the resources.",
              "type": {
                "name": "PackageFileReadingOptions",
                "path": {
                  "pkg": "models",
                  "group": "types",
                  "item": "PackageFileReadingOptions"
                }
              }
            }
          ]
        }
      ]
    },
    {
      "title": "Methods",
      "content": [
        {
          "displayType": "function",
          "description": "Compresses all XmlResources in this Package into CombinedTuningResources (one per group) and deletes the originals. The combined tunings are added to this package and returned.\n\nBefore using this method and potentially setting the game on fire, please review this post (https://www.patreon.com/posts/72110305) that explains the risks of using combining tuning and how to do so responsibly.\n\nIt is of utmost importance that the provided creator/project names are universally unique. These are not only used for the instance of the combined tuning, but also for the seed that is used for node refs. IF YOU FAIL TO MAKE THESE UNIQUE, YOU WILL BREAK THE GAME.",
          "name": "combineTuning",
          "arguments": [
            {
              "name": "creator",
              "description": "The creator of the project being combined",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "project",
              "description": "The name of the project being combined",
              "type": {
                "name": "string"
              }
            }
          ],
          "returnType": {
            "name": "ResourceEntry<CombinedTuningResource>[]",
            "path": {
              "pkg": "models",
              "group": "resources",
              "item": "CombinedTuningResource"
            }
          }
        },
        {
          "displayType": "function",
          "description": "Compresses all XmlResources in this Package into CombinedTuningResources (one per group) and deletes the originals. The combined tunings are added to this package and returned.\n\nBefore using this method and potentially setting the game on fire, please review this post (https://www.patreon.com/posts/72110305) that explains the risks of using combining tuning and how to do so responsibly.\n\nIt is of utmost importance that the provided creator/project names are universally unique. These are not only used for the instance of the combined tuning, but also for the seed that is used for node refs. IF YOU FAIL TO MAKE THESE UNIQUE, YOU WILL BREAK THE GAME.",
          "prefix": "async",
          "name": "combineTuningAsync",
          "arguments": [
            {
              "name": "creator",
              "description": "The creator of the project being combined",
              "type": {
                "name": "string"
              }
            },
            {
              "name": "project",
              "description": "The name of the project being combined",
              "type": {
                "name": "string"
              }
            }
          ],
          "returnType": {
            "name": "Promise<ResourceEntry<CombinedTuningResource>[]>",
            "path": {
              "pkg": "models",
              "group": "resources",
              "item": "CombinedTuningResource"
            }
          }
        }
      ]
    }
  ],
  "footer": {
    "seeAlso": [
      {
        "name": "Resource",
        "path": {
          "pkg": "models",
          "group": "types",
          "item": "Resource"
        }
      },
      {
        "name": "ResourceEntry",
        "path": {
          "pkg": "models",
          "group": "types",
          "item": "ResourceEntry"
        }
      },
      {
        "name": "ResourceKey",
        "path": {
          "pkg": "models",
          "group": "types",
          "item": "ResourceKey"
        }
      },
      {
        "name": "ResourceKeyPair",
        "path": {
          "pkg": "models",
          "group": "types",
          "item": "ResourceKeyPair"
        }
      },
      {
        "name": "@s4tk/plugin-bufferfromfile",
        "externalLink": "https://www.npmjs.com/package/@s4tk/plugin-bufferfromfile"
      }
    ]
  }
}